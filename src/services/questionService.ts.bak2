import * as XLSX from 'xlsx';
import { Question } from '../types';

type AnswerKey = 'А' | 'Б' | 'В' | 'Г';
const ALL_ANSWERS: AnswerKey[] = ['А', 'Б', 'В', 'Г'];

interface RowData {
    A: string;
    B: string;
    C: string;
    D: string;
    E: string;
    F: string;
    [key: string]: string;
}

type AnswerKey = 'А' | 'Б' | 'В' | 'Г';

export const readQuestionsFromExcel = async (file: string): Promise<Question[]> => {
    try {
        // Read the workbook
        const workbook = XLSX.readFile(file);
        
        // Get the Questions sheet
        const worksheet = workbook.Sheets['Questions'];
        if (!worksheet) {
            throw new Error('Could not find Questions sheet in Excel file');
        }

        // Convert to raw JSON data with header row
        const jsonData = XLSX.utils.sheet_to_json<ExcelRow>(worksheet, { raw: true });
        console.log('Raw Excel data:', jsonData);

        const questions: Question[] = [];

        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            
            // Skip rows with missing data
            if (!row || !row.A || !row.B || !row.C || !row.D || !row.E || !row.F) {
                console.warn('Skipping row due to missing data:', row);
                continue;
            }

            // Find correct answer by checking cell styles
            let correctAnswer: AnswerKey = 'А'; // Default
            for (const [col, ans] of [['C', 'А'], ['D', 'Б'], ['E', 'В'], ['F', 'Г']] as const) {
                const cellRef = `${col}${i + 2}`; // +2 because Excel is 1-based and we have a header row
                const cell = worksheet[cellRef];
                if (cell?.s?.font?.color?.rgb === '0000FF' || cell?.s?.font?.color?.rgb === '000000FF') {
                    correctAnswer = ans as AnswerKey;
                    break;
                }
            }

            const question: Question = {
                id: row.A,
                text: row.B,
                options: {
                    'А': row.C,
                    'Б': row.D,
                    'В': row.E,
                    'Г': row.F
                },
                correctAnswer
            };

            // Validate the question object
            if (isNaN(question.id) || !question.text || !Object.values(question.options).every(v => v)) {
                console.warn('Invalid question data:', question);
                continue;
            }

            questions.push(question);
        }

        if (questions.length === 0) {
            throw new Error('No valid questions found in Excel file');
        }

        console.log('Successfully loaded questions:', questions.length);
        return questions;

    } catch (error) {
        console.error('Error reading Excel file:', error);
        throw error;
    }
};
